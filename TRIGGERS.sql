
--1.BLAD APLIKACJI
CREATE OR REPLACE TRIGGER DLUGOSC_NUMERU
BEFORE INSERT OR UPDATE OF NUMER_TELEFONU ON KLIENCI
FOR EACH ROW
BEGIN
IF LENGTH(:NEW.NUMER_TELEFONU)>9 OR LENGTH(:NEW.NUMER_TELEFONU)<9
THEN
RAISE_APPLICATION_ERROR(-20000,'ZŁY NUMER TELEFONU');
END IF;
END;
/

INSERT INTO KLIENCI 
VALUES(6,'Karol','Gonson','Kielce','Daleka',1,'26-330','123');


--2.JESLI DODAMY NOWA PACZKE UZUPELNIANY JEST ETAP
CREATE OR REPLACE TRIGGER UZUPELNIJ_ETAP
BEFORE INSERT ON PACZKI
FOR EACH ROW 
BEGIN
INSERT INTO ETAP 
VALUES (:NEW.ID_ETAPU,5,'NIESPAKOWANA','NIE',NULL,NULL);
END;
/
INSERT INTO PACZKI
VALUES(PACZKI_SEQ.NEXTVAL,'LIST',8,0,0,0,0,ETAP_SEQ.NEXTVAL,2);
SELECT * FROM PACZKI;
SELECT * FROM ETAP;


--3.JESLI PRACOWNIK JEST ZAANGAZOWANY W PRZEWOZENIE A NIE MA PRZYDZIELONEGO SAMOCHODU TO ZOSTANIE DANY MU LOSOWY SAMOCHOD
CREATE OR REPLACE TRIGGER PRZYDZIEL_SAMOCHOD
AFTER INSERT ON PRZEWOZENIE
FOR EACH ROW 
DECLARE
CURSOR SPR_PRACOWNIKA IS
SELECT * FROM SAMOCHOD_DOSTAWCY;
LOSOWA NUMBER(2);
BEGIN
DBMS_OUTPUT.ENABLE;
FOR X IN SPR_PRACOWNIKA
LOOP
IF X.ID_PRACOWNIKA=:NEW.ID_PRACOWNIKA
THEN
RETURN;
END IF;
END LOOP;
LOSOWA:=DBMS_RANDOM.VALUE(0,SAMOCHODY_SEQ.CURRVAL);
INSERT INTO SAMOCHOD_DOSTAWCY
VALUES(SAMOCHOD_DOSTAWCY_SEQ.NEXTVAL,LOSOWA,:NEW.ID_PRACOWNIKA);
END;
/
SELECT * FROM PRZEWOZENIE;
SELECT * FROM SAMOCHOD_DOSTAWCY;
SELECT * FROM PRACOWNICY;
INSERT INTO PRACOWNICY
VALUES(PRACOWNICY_SEQ.NEXTVAL,'Kamil','Krawczyk','1997.05.14',2500,'Kornica','Górna',14,'604562307');
INSERT INTO PRZEWOZENIE
VALUES(PRZEWOZENIE_SEQ.NEXTVAL,'Katowice','Długa',3,6);
SELECT * FROM SAMOCHOD_DOSTAWCY;

--4.JESLI USUNIEMY PACZKE ZOSTANIE USUNIETY JEJ LIST PRZEWOZOWY ETAP ORAZ POZYCJA FAKTURY Z NIA ZWIAZANA

CREATE OR REPLACE TRIGGER USUNIETA_PACZKA
AFTER DELETE ON PACZKI
FOR EACH ROW
BEGIN
DELETE FROM LISTY_PRZEWOZOWE WHERE ID_PACZKI=:OLD.ID_PACZKI;
DELETE FROM ETAP WHERE ID_ETAPU=:OLD.ID_ETAPU;
DELETE FROM POZYCJA_FAKTURY WHERE ID_PACZKI=:OLD.ID_PACZKI;
END;
/

DELETE FROM PACZKI WHERE ID_PACZKI=1;
SELECT * FROM PACZKI;
SELECT * FROM ETAP;
SELECT * FROM LISTY_PRZEWOZOWE;
SELECT * FROM POZYCJA_FAKTURY;


--5.stworzyc historie paczki gdzie sie znajdowala i kiedy utworzy tabele ktora przechowuje zmiany zachodzace w tabeli przewozenie
DROP TRIGGER UZUPELNIJ_HISTORIE;
DROP TABLE HISTORIA_PACZKI CASCADE CONSTRAINTS;
CREATE TABLE HISTORIA_PACZKI
(
    ID_HISTORII NUMBER NOT NULL CONSTRAINT PK_HIS PRIMARY KEY,
    MIASTO VARCHAR2(20),
    DATA DATE,
    ID_PRZEWOZU NUMBER
);
CREATE SEQUENCE HIS_SEQ;
CREATE OR REPLACE TRIGGER UZUPELNIJ_HISTORIE
AFTER UPDATE OR INSERT ON PRZEWOZENIE
FOR EACH ROW
BEGIN
INSERT INTO HISTORIA_PACZKI
VALUES(HIS_SEQ.NEXTVAL,:NEW.AKTUALNE_MIASTO,SYSDATE(),:NEW.ID_PRZEWOZU);
END;
/

SELECT * FROM PACZKI;
UPDATE PRZEWOZENIE SET AKTUALNE_MIASTO='KOŃSKIE' WHERE ID_PRZEWOZU=3;
SELECT * FROM HISTORIA_PACZKI;
