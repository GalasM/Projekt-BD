--ZADANIE 1
EXEC FIRMA_KURIERSKA.UZUPELNIJ_CENE;
SELECT * FROM PACZKI;
--ZADANIE 2
EXEC FIRMA_KURIERSKA.ZWIEKSZ_PENSJE(100);
SELECT * FROM PRACOWNICY;
--ZADANIE 3
EXEC FIRMA_KURIERSKA.ZMIEN_MIEJSCE(2,'Katowice','Świętej Anny',7);
select * from etap;
SELECT * FROM przewozenie;
--ZADANIE 4
SELECT FIRMA_KURIERSKA.GDZIE_PACZKA(2) FROM DUAL;
--ZADANIE 5
UPDATE KLIENCI SET ULICA=NULL WHERE ID_KLIENTA=1;
SELECT * FROM KLIENCI;
EXEC FIRMA_KURIERSKA.UZUPELNIJ_NULL;
SELECT * FROM KLIENCI;
--ZADANIE 6
SELECT FIRMA_KURIERSKA.SREDNI_WIEK FROM DUAL;
--ZADANIE 7
--USUNAC PRACOWNIKOW PRZED URUCHOMIENIEM
SELECT * FROM PRACOWNICY;
VARIABLE SREDNIA NUMBER;
EXECUTE :srednia:=FIRMA_KURIERSKA.SREDNIA_PENSJA;
PRINT SREDNIA;

CREATE OR REPLACE PACKAGE FIRMA_KURIERSKA
IS

PROCEDURE UZUPELNIJ_CENE;
PROCEDURE ZWIEKSZ_PENSJE(BONUS NUMBER);
PROCEDURE ZMIEN_MIEJSCE(ID_PRZEWOZU_P NUMBER,MIASTO_P VARCHAR2,ULICA_P VARCHAR2,NUMER_P NUMBER);
FUNCTION GDZIE_PACZKA(ID_PACZKI_P NUMBER) RETURN VARCHAR2;
PROCEDURE UZUPELNIJ_NULL;
FUNCTION SREDNI_WIEK RETURN NUMBER;
FUNCTION SREDNIA_PENSJA RETURN NUMBER;
END FIRMA_KURIERSKA;
/

SET SERVEROUTPUT ON;
CREATE OR REPLACE PACKAGE BODY FIRMA_KURIERSKA
IS
--1.UZUPELNIA CENE W ZALEZNOSCI OD RODZAJU PACZKI
PROCEDURE UZUPELNIJ_CENE
IS
CURSOR ALL_PACZKI
IS
SELECT * FROM PACZKI;
BEGIN 
FOR X IN ALL_PACZKI
LOOP
IF X.RODZAJ_PACZKI='LIST'
THEN
UPDATE PACZKI SET CENA=8 WHERE ID_PACZKI=X.ID_PACZKI;
ELSIF X.RODZAJ_PACZKI='DO KILOGRAMA'
THEN
UPDATE PACZKI SET CENA=10 WHERE ID_PACZKI=X.ID_PACZKI;
ELSIF X.RODZAJ_PACZKI='2-5 KILOGRAMA'
THEN
UPDATE PACZKI SET CENA=15 WHERE ID_PACZKI=X.ID_PACZKI;
ELSIF X.RODZAJ_PACZKI='5-10 KILOGRAMÓW'
THEN
UPDATE PACZKI SET CENA=25 WHERE ID_PACZKI=X.ID_PACZKI;
END IF;
END LOOP;
END;

--2.dla pracownika ktory wykonal najwiecej pracy zwiekszyc pensje o wartosc podana w parametrze
PROCEDURE ZWIEKSZ_PENSJE(BONUS NUMBER)
IS
CURSOR PACK
IS
SELECT COUNT(P.ID_PRACOWNIKA)ILOSC_PRACY,P.ID_PRACOWNIKA FROM PRACOWNICY P
JOIN PAKOWANIE PA
ON PA.ID_PRACOWNIKA=P.ID_PRACOWNIKA
GROUP BY P.ID_PRACOWNIKA
HAVING COUNT(PA.ID_PRACOWNIKA)=(SELECT MAX(COUNT(PA.ID_PRACOWNIKA)) FROM PAKOWANIE PA GROUP BY PA.ID_PRACOWNIKA);
CURSOR PRZEW
IS
SELECT  COUNT(P.ID_PRACOWNIKA) ILOSC_PRACY,P.ID_PRACOWNIKA FROM PRACOWNICY P
JOIN PRZEWOZENIE PR
ON P.ID_PRACOWNIKA=PR.ID_PRACOWNIKA
GROUP BY P.ID_PRACOWNIKA
HAVING COUNT(PR.ID_PRACOWNIKA)=(SELECT MAX(COUNT(PR.ID_PRACOWNIKA)) FROM PRZEWOZENIE PR GROUP BY PR.ID_PRACOWNIKA);
BEGIN
FOR X IN PACK
LOOP
UPDATE PRACOWNICY SET PENSJA=PENSJA+BONUS WHERE ID_PRACOWNIKA=X.ID_PRACOWNIKA;
END LOOP;
FOR Y IN PRZEW
LOOP
UPDATE PRACOWNICY SET PENSJA=PENSJA+BONUS WHERE ID_PRACOWNIKA=Y.ID_PRACOWNIKA;
END LOOP;
END;


--3.ZMIEN AKTUALNE MIEJSCE PRZESYLKI(JESLI PACZKA JEST W MIEJSCU DOCELOWYM ZMIENIA STATUS)
PROCEDURE ZMIEN_MIEJSCE(ID_PRZEWOZU_P NUMBER,MIASTO_P VARCHAR2,ULICA_P VARCHAR2,NUMER_P NUMBER)
IS
MIEJSCE LISTY_PRZEWOZOWE%ROWTYPE;
CURSOR PACZKI_C
IS
SELECT * FROM PACZKI;
CURSOR ETAP_C
IS
SELECT * FROM ETAP;
BEGIN
SELECT lp.id_listu,lp.miejscowosc_nadania,lp.ulica_nadania,lp.numer_nadanie,lp.miejscowosc_doreczenia,lp.ulica_doreczenia,lp.numer_doreczenia,lp.id_paczki INTO MIEJSCE FROM LISTY_PRZEWOZOWE LP
JOIN PACZKI P
ON P.ID_PACZKI=LP.ID_PACZKI
INNER JOIN ETAP E
ON E.ID_ETAPU=P.ID_ETAPU
WHERE E.ID_PRZEWOZU=ID_PRZEWOZU_P;

FOR X IN PACZKI_C
LOOP
UPDATE PRZEWOZENIE P SET P.AKTUALNE_MIASTO=MIASTO_P,P.ULICA=ULICA_P,P.NR_BUDYNKU=NUMER_P WHERE P.ID_PRZEWOZU=ID_PRZEWOZU_P;
END LOOP;
IF MIEJSCE.MIEJSCOWOSC_DORECZENIA=MIASTO_P AND MIEJSCE.ULICA_DORECZENIA=ULICA_P AND MIEJSCE.NUMER_DORECZENIA=NUMER_P
THEN
FOR Y IN ETAP_C
LOOP
    UPDATE ETAP E SET E.STATUS='DOSTARCZONA',E.CZY_DOSTARCZONA='TAK',DLUGOSC_OCZEKIWANIA=0 WHERE E.ID_PRZEWOZU=ID_PRZEWOZU_P; 
END LOOP;
END IF;
END;


--4.funkcja ktora zwraca aktualne miejsce paczki po id_paczki
FUNCTION GDZIE_PACZKA(ID_PACZKI_P NUMBER)
RETURN VARCHAR2
IS
MIEJSCE PRZEWOZENIE.AKTUALNE_MIASTO%TYPE;
CURSOR ALL_PACZKI
IS
SELECT AKTUALNE_MIASTO FROM PRZEWOZENIE P
JOIN ETAP E
ON E.ID_PRZEWOZU=P.ID_PRZEWOZU
INNER JOIN
PACZKI PA
ON PA.ID_ETAPU=E.ID_ETAPU
WHERE PA.ID_PACZKI=ID_PACZKI_P;
BEGIN
FOR X IN ALL_PACZKI
LOOP
MIEJSCE:=X.AKTUALNE_MIASTO;
END LOOP;
DBMS_OUTPUT.PUT_LINE(MIEJSCE);
RETURN MIEJSCE;
END;


--5.JESLI WARTOSCI MIASTO LUB ULICA W REKORDZIE KLIENTA SA NULLAMI UZUPELNIA JE LOSOWYMI WARTOSCIAMI
PROCEDURE UZUPELNIJ_NULL
IS
LOSOWA_ULICA VARCHAR2(10);
LOSOWE_MIASTO VARCHAR2(10);
CURSOR KLIENCI_NULL
IS
SELECT * FROM KLIENCI 
WHERE MIASTO IS NULL OR ULICA IS NULL
FOR UPDATE;
BEGIN 
LOSOWE_MIASTO:=DBMS_RANDOM.STRING ('A',10);
LOSOWA_ULICA:=DBMS_RANDOM.STRING ('A',10);
FOR X IN KLIENCI_NULL
LOOP
IF X.MIASTO IS NULL AND X.ULICA IS NULL
THEN
UPDATE KLIENCI SET MIASTO=LOSOWE_MIASTO,ULICA=LOSOWA_ULICA WHERE CURRENT OF KLIENCI_NULL;
ELSIF X.MIASTO IS NULL AND X.ULICA IS NOT NULL
THEN
UPDATE KLIENCI SET MIASTO=LOSOWE_MIASTO WHERE CURRENT OF KLIENCI_NULL;
ELSIF X.MIASTO IS NOT NULL AND X.ULICA IS NULL
THEN
UPDATE KLIENCI SET ULICA=LOSOWA_ULICA WHERE CURRENT OF KLIENCI_NULL;
END IF;
END LOOP;
END;


--6.funkcja ktora zwraca sredni wiek pracownikow
FUNCTION SREDNI_WIEK
RETURN NUMBER
IS
CURSOR WIEK_PRACOWNICY
IS 
SELECT P.IMIE,P.NAZWISKO,(EXTRACT(YEAR FROM SYSDATE)-EXTRACT(YEAR FROM P.DATA_URODZENIA)) WIEK 
FROM PRACOWNICY P;
SUMA NUMBER(4):=0;
I NUMBER(2):=0;
WYNIK NUMBER(3):=0;
BEGIN
FOR X IN WIEK_PRACOWNICY
LOOP
SUMA:=SUMA+X.WIEK;
I:=I+1;
END LOOP;
WYNIK:=SUMA/I;
RETURN WYNIK;
END;


--7.wyjatek przy obliczaniu sredniej pensji
FUNCTION SREDNIA_PENSJA
RETURN NUMBER
IS
CURSOR ALL_PRACOWNICY
IS
SELECT * FROM PRACOWNICY;
ZERO_EXCEPTION EXCEPTION;
SUMA NUMBER(6):=0;
I NUMBER(2):=0;
WYNIK NUMBER(6):=0;
BEGIN
FOR X IN ALL_PRACOWNICY
LOOP
IF X.IMIE IS NULL
THEN
RAISE ZERO_EXCEPTION;
END IF;
SUMA:=SUMA+X.PENSJA;
I:=I+1;
END LOOP;
IF I=0
THEN
RAISE ZERO_EXCEPTION;
END IF;
WYNIK:=SUMA/I;
RETURN WYNIK;

EXCEPTION
WHEN ZERO_EXCEPTION
THEN 
DBMS_OUTPUT.ENABLE;
DBMS_OUTPUT.PUT_LINE('BRAK PRACOWNIKOW');
RETURN NULL;
END;
END FIRMA_KURIERSKA;
